// ËÆæÁΩÆWindowsÊéßÂà∂Âè∞ÁºñÁ†Å
if (process.platform === 'win32') {
    // ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
    process.env.PYTHONIOENCODING = 'utf-8';
    process.env.LANG = 'zh_CN.UTF-8';
    process.env.LC_ALL = 'zh_CN.UTF-8';

    // Â∞ùËØïËÆæÁΩÆÊéßÂà∂Âè∞‰ª£Á†ÅÈ°µ
    try {
        const { spawn } = require('child_process');
        spawn('chcp', ['65001'], { stdio: 'ignore' });
    } catch (error) {
        // ÂøΩÁï•ÈîôËØØ
    }
}

// Áé∞Âú®ÂØºÂÖ•ÂÖ∂‰ªñÊ®°Âùó
const { app, BrowserWindow, ipcMain, dialog, nativeImage } = require('electron');
const path = require('path');
const fs = require('fs');
const ModelAPI = require('./model-api');
const WebViewController = require('./webview-controller');
const IPCServer = require('./ipc-server');
const AIServer = require('./ai-server');

// Á¶ÅÁî®GPUÁºìÂ≠ò‰ª•ÈÅøÂÖçÊùÉÈôêÈóÆÈ¢ò
app.commandLine.appendSwitch('--disable-gpu-sandbox');
app.commandLine.appendSwitch('--disable-software-rasterizer');

// Ê∑ªÂä†WebViewÁõ∏ÂÖ≥ÁöÑÂëΩ‰ª§Ë°åÂºÄÂÖ≥ - ÁÆÄÂåñÈÖçÁΩÆÈÅøÂÖçÂÜ≤Á™Å
app.commandLine.appendSwitch('--enable-webview-tag');
app.commandLine.appendSwitch('--disable-web-security');
app.commandLine.appendSwitch('--no-sandbox');
app.commandLine.appendSwitch('--disable-features', 'OutOfBlinkCors');
app.commandLine.appendSwitch('--disable-site-isolation-trials');

// ÂÜÖÂ≠òÁÆ°ÁêÜ
app.commandLine.appendSwitch('--max-old-space-size', '4096');
app.commandLine.appendSwitch('--js-flags', '--max-old-space-size=4096');

// Â§ÑÁêÜÊú™ÊçïËé∑ÁöÑÂºÇÂ∏∏
process.on('uncaughtException', (error) => {
    console.error('Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù:', reason);
});
app.commandLine.appendSwitch('--disable-gpu');
app.commandLine.appendSwitch('--no-sandbox');
// const MCPInterface = require('./mcp'); // ÊöÇÊó∂Ê≥®ÈáäÊéâMCPÂäüËÉΩ

// ÂØºÂÖ•PythonËá™Âä®ÂåñÊ°•Êé•Âô®
let PythonAutomationBridge, searchTaobao, searchBaidu, checkEnvironment, executeAICommand, smartSearch, smartNavigateAndSearch;

try {
    const automationBridge = require('../python_automation/automation_bridge');
    PythonAutomationBridge = automationBridge.PythonAutomationBridge;
    searchTaobao = automationBridge.searchTaobao;
    searchBaidu = automationBridge.searchBaidu;
    checkEnvironment = automationBridge.checkEnvironment;
    executeAICommand = automationBridge.executeAICommand;
    smartSearch = automationBridge.smartSearch;
    smartNavigateAndSearch = automationBridge.smartNavigateAndSearch;

    console.log('\u2705 Python\u81ea\u52a8\u5316\u6865\u63a5\u5668\u5bfc\u5165\u6210\u529f');
} catch (error) {
    console.error('‚ùå PythonËá™Âä®ÂåñÊ°•Êé•Âô®ÂØºÂÖ•Â§±Ë¥•:', error);
    // ÂàõÂª∫Âç†‰ΩçÁ¨¶ÂáΩÊï∞ÔºåÈÅøÂÖçÂ∫îÁî®Â¥©Ê∫É
    PythonAutomationBridge = class { constructor() {} };
    searchTaobao = async () => ({ success: false, error: 'PythonËá™Âä®Âåñ‰∏çÂèØÁî®' });
    searchBaidu = async () => ({ success: false, error: 'PythonËá™Âä®Âåñ‰∏çÂèØÁî®' });
    checkEnvironment = async () => ({ success: false, error: 'PythonËá™Âä®Âåñ‰∏çÂèØÁî®' });
    executeAICommand = async () => ({ success: false, error: 'AIÂ¢ûÂº∫ÂäüËÉΩ‰∏çÂèØÁî®' });
    smartSearch = async () => ({ success: false, error: 'AIÂ¢ûÂº∫ÂäüËÉΩ‰∏çÂèØÁî®' });
    smartNavigateAndSearch = async () => ({ success: false, error: 'AIÂ¢ûÂº∫ÂäüËÉΩ‰∏çÂèØÁî®' });
}

let mainWindow;
let modelAPI;
let webViewController;
let ipcServer;
let aiServer;
// let mcpInterface; // ÊöÇÊó∂Ê≥®ÈáäÊéâMCPÂäüËÉΩ

function createWindow() {
    // ÂàõÂª∫ÊµèËßàÂô®Á™óÂè£
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            enableRemoteModule: false,
            preload: path.join(__dirname, 'preload.js'),
            webSecurity: false,
            webviewTag: true,
            sandbox: false,
            partition: 'persist:main',
            spellcheck: false,
            defaultEncoding: 'UTF-8'
        },
        icon: path.join(__dirname, '../assets/icon.png'), // Â¶ÇÊûúÊúâÂõæÊ†áÁöÑËØù
        show: false // ÂÖà‰∏çÊòæÁ§∫ÔºåÁ≠âÂä†ËΩΩÂÆåÊàêÂêéÂÜçÊòæÁ§∫
    });

    // Âä†ËΩΩÂ∫îÁî®ÁöÑ index.html
    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'));

    // ÂΩìÁ™óÂè£ÂáÜÂ§áÂ•ΩÊó∂ÊòæÁ§∫
    mainWindow.once('ready-to-show', async () => {
        mainWindow.show();

        // ÂàùÂßãÂåñWebViewÊéßÂà∂Âô®
        webViewController = new WebViewController(mainWindow);

        // ÂêØÂä®IPCÊúçÂä°Âô®
        try {
            ipcServer = new IPCServer(3001);
            ipcServer.setWebViewController(webViewController);
            await ipcServer.start();
            console.log('‚úÖ IPCÊúçÂä°Âô®ÂêØÂä®ÊàêÂäü');
        } catch (error) {
            console.error('IPCÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•:', error);
        }

        // ÂêØÂä®AIÊúçÂä°Âô®
        try {
            aiServer = new AIServer(3000);
            await aiServer.start();
            console.log('‚úÖ AIÊúçÂä°Âô®ÂêØÂä®ÊàêÂäü');
        } catch (error) {
            console.error('AIÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•:', error);
        }

        // ÂÆöÊúüÊ∏ÖÁêÜÂÜÖÂ≠ò
        setInterval(() => {
            if (global.gc) {
                global.gc();
                console.log('ÊâßË°åÂûÉÂúæÂõûÊî∂');
            }
        }, 300000); // ÊØè5ÂàÜÈíüÊ∏ÖÁêÜ‰∏ÄÊ¨°
    });

    // ÈòªÊ≠¢ÊâÄÊúâÊñ∞Á™óÂè£ÂàõÂª∫‰ª•ÈÅøÂÖçÂ¥©Ê∫É
    mainWindow.webContents.setWindowOpenHandler(({ url, frameName, features, disposition }) => {
        console.log('ÈòªÊ≠¢Êñ∞Á™óÂè£ÊâìÂºÄ:', { url, frameName, features, disposition });
        return { action: 'deny' };
    });

    // Â§ÑÁêÜWebViewÁöÑÊñ∞Á™óÂè£‰∫ã‰ª∂
    mainWindow.webContents.on('new-window', (event, navigationUrl, frameName, disposition, options) => {
        console.log('‰∏ªÁ™óÂè£ÈòªÊ≠¢Êñ∞Á™óÂè£:', { navigationUrl, frameName, disposition });
        event.preventDefault();
    });

    // ÈòªÊ≠¢ÊâÄÊúâÂ≠êÁ™óÂè£ÂíåÂºπÁ™ó
    mainWindow.webContents.on('did-create-window', (childWindow) => {
        console.log('Ê£ÄÊµãÂà∞Â≠êÁ™óÂè£ÂàõÂª∫ÔºåÁ´ãÂç≥ÂÖ≥Èó≠');
        childWindow.destroy();
    });

    // ÁÆÄÂåñÁöÑÈîôËØØÂ§ÑÁêÜ
    mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {
        console.error('È°µÈù¢Âä†ËΩΩÂ§±Ë¥•:', errorCode, errorDescription, validatedURL);
    });

    // Â§ÑÁêÜÊ∏≤ÊüìËøõÁ®ãÂ¥©Ê∫É
    mainWindow.webContents.on('render-process-gone', (event, details) => {
        console.error('Ê∏≤ÊüìËøõÁ®ãÂ¥©Ê∫É:', details);
        // ‰∏çËá™Âä®ÈáçÂêØÔºåËÆ©Áî®Êà∑ÊâãÂä®Â§ÑÁêÜ
    });

    // Â§ÑÁêÜÂ≠êËøõÁ®ãÂ¥©Ê∫É
    mainWindow.webContents.on('child-process-gone', (event, details) => {
        console.error('Â≠êËøõÁ®ãÂ¥©Ê∫É:', details);
    });

    // ÂºÄÂèëÊ®°Âºè‰∏ãÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑
    if (process.argv.includes('--dev')) {
        mainWindow.webContents.openDevTools();
    }

    // ÂΩìÁ™óÂè£Ë¢´ÂÖ≥Èó≠Êó∂
    mainWindow.on('closed', () => {
        mainWindow = null;
    });
}

// Ê∏ÖÁêÜÁºìÂ≠òÁõÆÂΩï
function cleanupCache() {
    try {
        const cacheDir = path.join(app.getPath('userData'), 'GPUCache');
        if (fs.existsSync(cacheDir)) {
            fs.rmSync(cacheDir, { recursive: true, force: true });
    
        }
    } catch (error) {

    }
}

// ÂΩì Electron ÂÆåÊàêÂàùÂßãÂåñÂπ∂ÂáÜÂ§áÂàõÂª∫ÊµèËßàÂô®Á™óÂè£Êó∂Ë∞ÉÁî®Ê≠§ÊñπÊ≥ï
app.whenReady().then(() => {
    // Ê∏ÖÁêÜÁºìÂ≠ò
    cleanupCache();

    // ÂàùÂßãÂåñAPIÂÆû‰æã
    modelAPI = new ModelAPI();
    // mcpInterface = new MCPInterface(); // ÊöÇÊó∂Ê≥®ÈáäÊéâMCPÂäüËÉΩ

    // Ê≥®ÂÜåÊâÄÊúâIPCÂ§ÑÁêÜÂô®
    registerIPCHandlers();

    createWindow();
});

// ÂΩìÊâÄÊúâÁ™óÂè£ÈÉΩË¢´ÂÖ≥Èó≠Êó∂ÈÄÄÂá∫Â∫îÁî®
app.on('window-all-closed', () => {
    // Âú® macOS ‰∏äÔºåÂ∫îÁî®ÂíåÂÆÉ‰ª¨ÁöÑËèúÂçïÊ†èÈÄöÂ∏∏‰ºö‰øùÊåÅÊ¥ªË∑ÉÁä∂ÊÄÅÔºåÁõ¥Âà∞Áî®Êà∑‰ΩøÁî® Cmd + Q ÊòéÁ°ÆÈÄÄÂá∫
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // Âú® macOS ‰∏äÔºåÂΩìÁÇπÂáª dock ÂõæÊ†áÂπ∂‰∏îÊ≤°ÊúâÂÖ∂‰ªñÁ™óÂè£ÊâìÂºÄÊó∂ÔºåÈÄöÂ∏∏‰ºöÈáçÊñ∞ÂàõÂª∫‰∏Ä‰∏™Á™óÂè£
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// Â∫îÁî®ÈÄÄÂá∫ÂâçÊ∏ÖÁêÜ
app.on('before-quit', async () => {
    console.log('üîÑ Â∫îÁî®ÈÄÄÂá∫ÂâçÊ∏ÖÁêÜ...');

    // ÂÅúÊ≠¢AIÊúçÂä°Âô®
    if (aiServer) {
        try {
            await aiServer.stop();
        } catch (error) {
            console.error('ÂÅúÊ≠¢AIÊúçÂä°Âô®Â§±Ë¥•:', error);
        }
    }

    // ÂÅúÊ≠¢IPCÊúçÂä°Âô®
    if (ipcServer) {
        try {
            await ipcServer.stop();
        } catch (error) {
            console.error('ÂÅúÊ≠¢IPCÊúçÂä°Âô®Â§±Ë¥•:', error);
        }
    }

    console.log('‚úÖ Ê∏ÖÁêÜÂÆåÊàê');
});

// IPC ÈÄö‰ø°Â§ÑÁêÜÂáΩÊï∞
let handlersRegistered = false;
function registerIPCHandlers() {
    if (handlersRegistered) {

        return;
    }


    handlersRegistered = true;

// Â§ÑÁêÜÈ°µÈù¢Êï∞ÊçÆÊèêÂèñËØ∑Ê±Ç
ipcMain.handle('extract-page-data', async () => {
    try {
        const result = await mainWindow.webContents.executeJavaScript(`
            (function() {
                // Ëé∑ÂèñHTML
                const html = document.documentElement.outerHTML;
                
                // Ëé∑ÂèñCSS
                let css = '';
                try {
                    css = Array.from(document.styleSheets)
                        .map(sheet => {
                            try {
                                return Array.from(sheet.cssRules || [])
                                    .map(rule => rule.cssText).join('\\n');
                            } catch (e) {
                                return '/* External stylesheet: ' + (sheet.href || 'unknown') + ' */';
                            }
                        }).join('\\n');
                } catch (e) {
                    css = '/* Could not extract CSS: ' + e.message + ' */';
                }
                
                // Ëé∑ÂèñJavaScript
                const scripts = Array.from(document.scripts)
                    .map(script => {
                        if (script.src) {
                            return '// External script: ' + script.src;
                        } else {
                            return script.innerText;
                        }
                    }).join('\\n\\n');
                
                return { html, css, scripts };
            })();
        `);
        
        return result;
    } catch (error) {
        console.error('Error extracting page data:', error);
        throw error;
    }
});

// Â§ÑÁêÜÊà™ÂõæËØ∑Ê±Ç - ËøîÂõûbase64Ê†ºÂºè
ipcMain.handle('capture-screenshot', async () => {
    try {
        const image = await mainWindow.webContents.capturePage();

        // Áõ¥Êé•ËΩ¨Êç¢‰∏∫base64Ê†ºÂºèÔºåÈÅøÂÖçÊú¨Âú∞Êñá‰ª∂URLÈóÆÈ¢ò
        const base64Data = image.toDataURL();

        console.log('Screenshot captured, size:', base64Data.length, 'characters');

        return {
            success: true,
            url: base64Data, // Áõ¥Êé•ËøîÂõûbase64 data URL
            size: base64Data.length,
            format: 'base64'
        };
    } catch (error) {
        console.error('Error capturing screenshot:', error);
        return {
            success: false,
            error: error.message
        };
    }
});

// Ê∏ÖÁêÜ‰∏¥Êó∂Êà™ÂõæÊñá‰ª∂
ipcMain.handle('cleanup-screenshots', async () => {
    try {
        const fs = require('fs');
        const path = require('path');
        const os = require('os');

        const tempDir = path.join(os.tmpdir(), 'electron-browser-ai');
        if (fs.existsSync(tempDir)) {
            const files = fs.readdirSync(tempDir);
            let cleanedCount = 0;

            files.forEach(file => {
                if (file.startsWith('screenshot-') && file.endsWith('.png')) {
                    const filepath = path.join(tempDir, file);
                    const stats = fs.statSync(filepath);
                    const now = Date.now();
                    const fileAge = now - stats.mtime.getTime();

                    // Âà†Èô§Ë∂ÖËøá1Â∞èÊó∂ÁöÑÊà™ÂõæÊñá‰ª∂
                    if (fileAge > 60 * 60 * 1000) {
                        fs.unlinkSync(filepath);
                        cleanedCount++;
                    }
                }
            });

            console.log(`Cleaned up ${cleanedCount} old screenshot files`);
            return { success: true, cleanedCount };
        }

        return { success: true, cleanedCount: 0 };
    } catch (error) {
        console.error('Error cleaning up screenshots:', error);
        return { success: false, error: error.message };
    }
});

// Â§ÑÁêÜ‰øùÂ≠òÊñá‰ª∂ËØ∑Ê±Ç
ipcMain.handle('save-file', async (event, data) => {
    try {
        const { filePath } = await dialog.showSaveDialog(mainWindow, {
            defaultPath: 'page-documentation.json',
            filters: [
                { name: 'JSON Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
            ]
        });

        if (filePath) {
            fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
            return { success: true, filePath };
        }
        
        return { success: false, cancelled: true };
    } catch (error) {
        console.error('Error saving file:', error);
        return { success: false, error: error.message };
    }
});

// Â§ÑÁêÜÊòæÁ§∫ÈÄöÁü•
ipcMain.handle('show-notification', async (event, message) => {
    const { Notification } = require('electron');
    
    if (Notification.isSupported()) {
        new Notification({
            title: 'Electron Browser AI',
            body: message
        }).show();
    }
});

// Â§ÑÁêÜÈîôËØØÊó•Âøó
ipcMain.handle('log-error', async (event, error) => {
    console.error('Renderer error:', error);
});

// AIÊ®°ÂûãÁõ∏ÂÖ≥ÁöÑIPCÂ§ÑÁêÜ

// ÂèëÈÄÅÊï∞ÊçÆÂà∞AIÊ®°Âûã
ipcMain.handle('send-to-model', async (event, pageData) => {
    try {
        const result = await modelAPI.generateDocumentation(pageData);
        return result;
    } catch (error) {
        console.error('Error sending to model:', error);
        return {
            success: false,
            error: error.message || 'Êú™Áü•ÈîôËØØ',
            timestamp: new Date().toISOString()
        };
    }
});

// ËÆæÁΩÆAIÊ®°ÂûãÈÖçÁΩÆ
ipcMain.handle('set-model-config', async (event, config) => {
    try {
        modelAPI.setConfig(config);
        return { success: true };
    } catch (error) {
        console.error('Error setting model config:', error);
        throw error;
    }
});

// ÊµãËØïAIÊ®°ÂûãËøûÊé•
ipcMain.handle('test-model-connection', async () => {
    try {
        return await modelAPI.testConnection();
    } catch (error) {
        console.error('Error testing model connection:', error);
        return { success: false, error: error.message };
    }
});

// Ëé∑ÂèñÂèØÁî®Ê®°ÂûãÂàóË°®
ipcMain.handle('get-available-models', async () => {
    try {
        return await modelAPI.getAvailableModels();
    } catch (error) {
        console.error('Error getting available models:', error);
        return [];
    }
});

// MCPÂäüËÉΩÊöÇÊó∂‰∏çÂèØÁî®ÁöÑÂç†‰ΩçÁ¨¶
ipcMain.handle('mcp-is-available', async () => {
    return { available: false, error: 'MCPÂäüËÉΩÊöÇÊó∂‰∏çÂèØÁî®' };
});

// Python IPCÂ§ÑÁêÜÂô®Â∞ÜÂú®‰∏ãÊñπÁªü‰∏ÄÊ≥®ÂÜå


// Python IPCÂ§ÑÁêÜÂô®Ê≥®ÂÜå


// Ê∏ÖÁêÜÊâÄÊúâÁé∞ÊúâÁöÑÂ§ÑÁêÜÂô®
const pythonHandlers = [
    'python-check-environment',
    'python-execute-ai-command', 
    'python-execute-workflow',
    'python-smart-search',
    'python-smart-navigate-search',
    'python-search-taobao',
    'python-search-baidu',
    'python-install-dependencies'
];

pythonHandlers.forEach(handler => {
    ipcMain.removeAllListeners(handler);
});

// 1. PythonÁéØÂ¢ÉÊ£ÄÊü•
ipcMain.handle('python-check-environment', async () => {
    try {


        if (!checkEnvironment || typeof checkEnvironment !== 'function') {
            return {
                success: false,
                message: 'checkEnvironmentÂáΩÊï∞‰∏çÂèØÁî®',
                error: 'Function not available'
            };
        }

        const result = await checkEnvironment();

        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('PythonÁéØÂ¢ÉÊ£ÄÊü•Â§±Ë¥•:', error);
        return {
            success: false,
            message: 'PythonÁéØÂ¢ÉÊ£ÄÊü•Â§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});

// 2. AIÂ¢ûÂº∫ÂëΩ‰ª§ÊâßË°å
ipcMain.handle('python-execute-ai-command', async (event, command, options = {}) => {
    try {


        if (!executeAICommand || typeof executeAICommand !== 'function') {
            throw new Error('executeAICommandÂáΩÊï∞‰∏çÂèØÁî®');
        }

        const result = await executeAICommand(command, {
            aiApi: 'http://localhost:3000/api/ai',
            ...options
        });


        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('AIÂ¢ûÂº∫ÂëΩ‰ª§ÊâßË°åÂ§±Ë¥•:', error);
        return {
            success: false,
            message: 'AIÂ¢ûÂº∫ÂëΩ‰ª§ÊâßË°åÂ§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});

// 3. PythonÂ∑•‰ΩúÊµÅÊâßË°å
ipcMain.handle('python-execute-workflow', async (event, workflow, options = {}) => {
    try {
        console.log('üêç ÊâßË°åPythonËá™Âä®ÂåñÂ∑•‰ΩúÊµÅ:', workflow);
        
        if (!PythonAutomationBridge) {
            throw new Error('PythonAutomationBridge‰∏çÂèØÁî®');
        }
        
        const bridge = new PythonAutomationBridge();
        const result = await bridge.executeWorkflow(workflow, options);
        
        console.log('‚úÖ PythonÂ∑•‰ΩúÊµÅÊâßË°åÂÆåÊàê');
        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('PythonÂ∑•‰ΩúÊµÅÊâßË°åÂ§±Ë¥•:', error);
        return {
            success: false,
            message: 'PythonÂ∑•‰ΩúÊµÅÊâßË°åÂ§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});

// 4. Êô∫ËÉΩÊêúÁ¥¢
ipcMain.handle('python-smart-search', async (event, query, options = {}) => {
    try {
        console.log('üß† ÊâßË°åÊô∫ËÉΩÊêúÁ¥¢:', query);
        
        if (!smartSearch || typeof smartSearch !== 'function') {
            throw new Error('smartSearchÂáΩÊï∞‰∏çÂèØÁî®');
        }
        
        const result = await smartSearch(query, options);
        console.log('‚úÖ Êô∫ËÉΩÊêúÁ¥¢ÂÆåÊàê');
        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('Êô∫ËÉΩÊêúÁ¥¢Â§±Ë¥•:', error);
        return {
            success: false,
            message: 'Êô∫ËÉΩÊêúÁ¥¢Â§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});

// 5. Êô∫ËÉΩÂØºËà™ÊêúÁ¥¢
ipcMain.handle('python-smart-navigate-search', async (event, site, query, options = {}) => {
    try {
        console.log('üéØ ÊâßË°åÊô∫ËÉΩÂØºËà™ÊêúÁ¥¢:', site, query);
        
        if (!smartNavigateAndSearch || typeof smartNavigateAndSearch !== 'function') {
            throw new Error('smartNavigateAndSearchÂáΩÊï∞‰∏çÂèØÁî®');
        }
        
        const result = await smartNavigateAndSearch(site, query, options);
        console.log('‚úÖ Êô∫ËÉΩÂØºËà™ÊêúÁ¥¢ÂÆåÊàê');
        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('Êô∫ËÉΩÂØºËà™ÊêúÁ¥¢Â§±Ë¥•:', error);
        return {
            success: false,
            message: 'Êô∫ËÉΩÂØºËà™ÊêúÁ¥¢Â§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});

// 6. Ê∑òÂÆùÊêúÁ¥¢
ipcMain.handle('python-search-taobao', async (event, query, options = {}) => {
    try {
        console.log('üõí ÊâßË°åÊ∑òÂÆùÊêúÁ¥¢:', query);
        
        if (!searchTaobao || typeof searchTaobao !== 'function') {
            throw new Error('searchTaobaoÂáΩÊï∞‰∏çÂèØÁî®');
        }
        
        const result = await searchTaobao(query, options);
        console.log('‚úÖ Ê∑òÂÆùÊêúÁ¥¢ÂÆåÊàê');
        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('Ê∑òÂÆùÊêúÁ¥¢Â§±Ë¥•:', error);
        return {
            success: false,
            message: 'Ê∑òÂÆùÊêúÁ¥¢Â§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});

// 7. ÁôæÂ∫¶ÊêúÁ¥¢
ipcMain.handle('python-search-baidu', async (event, query, options = {}) => {
    try {
        console.log('üîç ÊâßË°åÁôæÂ∫¶ÊêúÁ¥¢:', query);
        
        if (!searchBaidu || typeof searchBaidu !== 'function') {
            throw new Error('searchBaiduÂáΩÊï∞‰∏çÂèØÁî®');
        }
        
        const result = await searchBaidu(query, options);
        console.log('‚úÖ ÁôæÂ∫¶ÊêúÁ¥¢ÂÆåÊàê');
        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('ÁôæÂ∫¶ÊêúÁ¥¢Â§±Ë¥•:', error);
        return {
            success: false,
            message: 'ÁôæÂ∫¶ÊêúÁ¥¢Â§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});

// 8. ÂÆâË£ÖPython‰æùËµñ
ipcMain.handle('python-install-dependencies', async () => {
    try {
        console.log('üì¶ ÂÆâË£ÖPython‰æùËµñ...');
        
        if (!PythonAutomationBridge) {
            throw new Error('PythonAutomationBridge‰∏çÂèØÁî®');
        }
        
        const bridge = new PythonAutomationBridge();
        const result = await bridge.installDependencies();
        console.log('‚úÖ Python‰æùËµñÂÆâË£ÖÂÆåÊàê');
        return result || { success: false, error: 'Êú™Áü•ÈîôËØØ' };
    } catch (error) {
        console.error('Python‰æùËµñÂÆâË£ÖÂ§±Ë¥•:', error);
        return {
            success: false,
            message: 'Python‰æùËµñÂÆâË£ÖÂ§±Ë¥•: ' + error.message,
            error: error.toString()
        };
    }
});



// WebViewÊéßÂà∂IPCÂ§ÑÁêÜÂô®

// WebViewÂØºËà™
ipcMain.handle('webview-navigate', async (event, url) => {
    try {
        if (!webViewController) {
            return { success: false, error: 'WebViewÊéßÂà∂Âô®Êú™ÂàùÂßãÂåñ' };
        }
        return await webViewController.navigate(url);
    } catch (error) {
        console.error('WebViewÂØºËà™Â§±Ë¥•:', error);
        return { success: false, error: error.message };
    }
});

// WebViewÊêúÁ¥¢
ipcMain.handle('webview-search', async (event, query, site = 'baidu') => {
    try {
        if (!webViewController) {
            return { success: false, error: 'WebViewÊéßÂà∂Âô®Êú™ÂàùÂßãÂåñ' };
        }
        return await webViewController.search(query, site);
    } catch (error) {
        console.error('WebViewÊêúÁ¥¢Â§±Ë¥•:', error);
        return { success: false, error: error.message };
    }
});

// WebViewÁÇπÂáªÂÖÉÁ¥†
ipcMain.handle('webview-click', async (event, selector) => {
    try {
        if (!webViewController) {
            return { success: false, error: 'WebViewÊéßÂà∂Âô®Êú™ÂàùÂßãÂåñ' };
        }
        return await webViewController.clickElement(selector);
    } catch (error) {
        console.error('WebViewÁÇπÂáªÂ§±Ë¥•:', error);
        return { success: false, error: error.message };
    }
});

// WebViewËæìÂÖ•ÊñáÊú¨
ipcMain.handle('webview-input', async (event, selector, text) => {
    try {
        if (!webViewController) {
            return { success: false, error: 'WebViewÊéßÂà∂Âô®Êú™ÂàùÂßãÂåñ' };
        }
        return await webViewController.inputText(selector, text);
    } catch (error) {
        console.error('WebViewËæìÂÖ•Â§±Ë¥•:', error);
        return { success: false, error: error.message };
    }
});

// WebViewÊâßË°åËÑöÊú¨
ipcMain.handle('webview-execute-script', async (event, script) => {
    try {
        if (!webViewController) {
            return { success: false, error: 'WebViewÊéßÂà∂Âô®Êú™ÂàùÂßãÂåñ' };
        }
        return await webViewController.executeScript(script);
    } catch (error) {
        console.error('WebViewËÑöÊú¨ÊâßË°åÂ§±Ë¥•:', error);
        return { success: false, error: error.message };
    }
});

// WebViewËé∑ÂèñÈ°µÈù¢‰ø°ÊÅØ
ipcMain.handle('webview-get-page-info', async (event) => {
    try {
        if (!webViewController) {
            return { success: false, error: 'WebViewÊéßÂà∂Âô®Êú™ÂàùÂßãÂåñ' };
        }
        return await webViewController.getPageInfo();
    } catch (error) {
        console.error('Ëé∑ÂèñÈ°µÈù¢‰ø°ÊÅØÂ§±Ë¥•:', error);
        return { success: false, error: error.message };
    }
});


}
